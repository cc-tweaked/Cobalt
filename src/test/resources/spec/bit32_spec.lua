describe("bit32 library :lua==5.2", function()
	it("0-argument calls", function()
		expect(bit32.band()):eq(bit32.bnot(0))
		expect(bit32.btest()):eq(true)
		expect(bit32.bor()):eq(0)
		expect(bit32.bxor()):eq(0)
	end)

	describe("band", function()
		it("basic operation", function()
			expect(bit32.band()):eq(bit32.band(0xffffffff))
			expect(bit32.band(1,2)):eq(0)
		end)

		it("out of range numbers", function()
			expect(bit32.band(-1)):eq(0xffffffff)
			expect(bit32.band(2^33 - 1)):eq(0xffffffff)
			expect(bit32.band(-2^33 - 1)):eq(0xffffffff)
			expect(bit32.band(2^33 + 1)):eq(1)
			expect(bit32.band(-2^33 + 1)):eq(1)
			expect(bit32.band(-2^40)):eq(0)
			expect(bit32.band(2^40)):eq(0)
			expect(bit32.band(-2^40 - 2)):eq(0xfffffffe)
			expect(bit32.band(2^40 - 4)):eq(0xfffffffc)
		end)
	end)

	describe("lrotate", function()
		it("out of range numbers", function()
			expect(bit32.lrotate(0, -1)):eq(0)
			expect(bit32.lrotate(0, 7)):eq(0)
			expect(bit32.lrotate(0x12345678, 4)):eq(0x23456781)
			expect(bit32.rrotate(0x12345678, -4)):eq(0x23456781)
			expect(bit32.lrotate(0x12345678, -8)):eq(0x78123456)
			expect(bit32.rrotate(0x12345678, 8)):eq(0x78123456)
			expect(bit32.lrotate(0xaaaaaaaa, 2)):eq(0xaaaaaaaa)
			expect(bit32.lrotate(0xaaaaaaaa, -2)):eq(0xaaaaaaaa)
		end)

		it("out of range shifts", function()
			for i = -50, 50 do
				expect(bit32.lrotate(0x89abcdef, i)):eq(bit32.lrotate(0x89abcdef, i%32))
			end
		end)
	end)

	describe("shifts", function()
		it("out of range numbers", function()
			expect(bit32.lshift(0x12345678, 4)):eq(0x23456780)
			expect(bit32.lshift(0x12345678, 8)):eq(0x34567800)
			expect(bit32.lshift(0x12345678, -4)):eq(0x01234567)
			expect(bit32.lshift(0x12345678, -8)):eq(0x00123456)
			expect(bit32.lshift(0x12345678, 32)):eq(0)
			expect(bit32.lshift(0x12345678, -32)):eq(0)
			expect(bit32.rshift(0x12345678, 4)):eq(0x01234567)
			expect(bit32.rshift(0x12345678, 8)):eq(0x00123456)
			expect(bit32.rshift(0x12345678, 32)):eq(0)
			expect(bit32.rshift(0x12345678, -32)):eq(0)
			expect(bit32.arshift(0x12345678, 0)):eq(0x12345678)
			expect(bit32.arshift(0x12345678, 1)):eq(0x12345678 / 2)
			expect(bit32.arshift(0x12345678, -1)):eq(0x12345678 * 2)
			expect(bit32.arshift(-1, 1)):eq(0xffffffff)
			expect(bit32.arshift(-1, 24)):eq(0xffffffff)
			expect(bit32.arshift(-1, 32)):eq(0xffffffff)
			expect(bit32.arshift(-1, -1)):eq((-1 * 2) % 2^32)
		end)
	end)

	it("some special cases", function()
		-- These are from the bitwise PUC Lua test, and I don't know how to sort)
		local c = {0, 1, 2, 3, 10, 0x80000000, 0xaaaaaaaa, 0x55555555,
				0xffffffff, 0x7fffffff}

		for _, b in pairs(c) do
			expect(bit32.band(b)):eq(b)
			expect(bit32.band(b, b)):eq(b)
			expect(bit32.btest(b, b)):eq((b ~= 0))
			expect(bit32.band(b, b, b)):eq(b)
			expect(bit32.btest(b, b, b)):eq((b ~= 0))
			expect(bit32.band(b, bit32.bnot(b))):eq(0)
			expect(bit32.bor(b, bit32.bnot(b))):eq(bit32.bnot(0))
			expect(bit32.bor(b)):eq(b)
			expect(bit32.bor(b, b)):eq(b)
			expect(bit32.bor(b, b, b)):eq(b)
			expect(bit32.bxor(b)):eq(b)
			expect(bit32.bxor(b, b)):eq(0)
			expect(bit32.bxor(b, 0)):eq(b)
			expect(bit32.bnot(b)):ne(b)
			expect(bit32.bnot(bit32.bnot(b))):eq(b)
			expect(bit32.bnot(b)):eq(2^32 - 1 - b)
			expect(bit32.lrotate(b, 32)):eq(b)
			expect(bit32.rrotate(b, 32)):eq(b)
			expect(bit32.lshift(bit32.lshift(b, -4), 4)):eq(bit32.band(b, bit32.bnot(0xf)))
			expect(bit32.rshift(bit32.rshift(b, 4), -4)):eq(bit32.band(b, bit32.bnot(0xf)))
			for i = -40, 40 do
				expect(bit32.lshift(b, i)):eq(math.floor((b * 2^i) % 2^32))
			end
		end

		assert(not pcall(bit32.band, {}))
		assert(not pcall(bit32.bnot, "a"))
		assert(not pcall(bit32.lshift, 45))
		assert(not pcall(bit32.lshift, 45, print))
		assert(not pcall(bit32.rshift, 45, print))
	end)

	describe("extract", function()
		it("extracts bits", function()
			expect(bit32.extract(0x12345678, 0, 4)):eq(8)
			expect(bit32.extract(0x12345678, 4, 4)):eq(7)
			expect(bit32.extract(0xa0001111, 28, 4)):eq(0xa)
			expect(bit32.extract(0xa0001111, 31, 1)):eq(1)
			expect(bit32.extract(0x50000111, 31, 1)):eq(0)
			expect(bit32.extract(0xf2345679, 0, 32)):eq(0xf2345679)
		end)

		it("fails", function()
			expect.error(bit32.extract, 0, -1):str_match("field cannot be negative")
			expect.error(bit32.extract, 0, 32):eq("trying to access non-existent bits")
			expect.error(bit32.extract, 0, 0, 33):eq("trying to access non-existent bits")
			expect.error(bit32.extract, 0, 31, 2):eq("trying to access non-existent bits")
		end)
	end)

	describe("replace", function()
		it("replaces bits", function()
			expect(bit32.replace(0x12345678, 5, 28, 4)):eq(0x52345678)
			expect(bit32.replace(0x12345678, 0x87654321, 0, 32)):eq(0x87654321)
			expect(bit32.replace(0, 1, 2)):eq(2^2)
			expect(bit32.replace(0, -1, 4)):eq(2^4)
			expect(bit32.replace(-1, 0, 31)):eq(2^31 - 1)
			expect(bit32.replace(-1, 0, 1, 2)):eq(2^32 - 7)
		end)
	end)
end)
